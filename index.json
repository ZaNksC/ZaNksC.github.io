[{"content":"","permalink":"https://zanksc.github.io/message/","summary":"","title":"💬 留言板"},{"content":" 装修一下驾驶舱，让我们扬帆起航。我们应当知道，航海比造船更具魅力与挑战。\n前言 Hugo作为建站博客工具的时候，博文的载体是 markdown ，而 markdown 本身是一个纯文本的标记语言，在Hugo工具提供的命令中，会转换成静态的网页文件来提供更加优质的阅读体验。所以，在理论上，选用任何的文本编辑器，其实都可以作为博客的写作工具。\n然而，在真实使用的情况下，我们需要先在命令行中，输入 hugo new posts/xxx.md 命令来创建一篇文章，然后打开对应的文本编辑器来编辑文章，还需要在命令中使用 hugo serve -D 来看一下显示效果，如果用到图片，还需要手动管理图片的地址来保证本地和发布之后保持一致，整个过程就会显得非常的繁琐。\n基于以上我博客的编写流程，提炼了几个痛点和几点期望\n创建文章需要输入命令，我希望可以通过图形化界面快速的创建文章 博客图片的管理，利用图床进行图片 本文将会围绕这两个痛点，对写作体验进行逐步的优化。我计划使用Obsidian作为我的写作工具。以下将是我计划中的写作及发布流程（配合自动发布）：\n如果你希望跟我拥有一样的配置，那么需要提前准备好以下软件或账号：\n一个基于Hugo构建的笔记目录 Obsidian : 一款舒适的Markdown编辑器 PicList: 一款基于PicGo二次开发的图床管理工具 腾讯云COS服务： 请自行前往腾讯云开启（有免费额度，超过之后需要付费） 插件\u0026amp;软件 以下插件均指代Obsidian插件市场中的插件，软件为系统软件，均需要自己安装。 对于Obsidian插件需要关闭安全模式，来开启第三方插件，以下插件均可以通过插件市场下载，插件在Github中，如遇到网络问题请自行解决。 安装完OB插件记得重启\n功能插件 以下插件均为必须安装的插件，用于实现前文提到的功能。\nShell Command Shell Command是一款可以在Obsidian中运行操作系统命令的插件，由于hugo和Git的操作之前都是基于命令行手敲的，所以我选用了他作为实现层的插件，在Shell Command中包装好常用的命令，然后通过其他插件来进行更近一步的封装。\nCommander Shell Command是一款可以将命令设置为图标的插件，用于将Hugo创建博客的命令可视化\nGit 用于可视化Git操作\nHugo Preview 用于在本地进行Hugo网站预览，可以实时预览，非常好用，免去了打开命令行输入hugo server -D 命令的麻烦（实际上这个按钮代替你执行了这个命令），如果有双屏的话，可以一个屏幕预览一个屏幕书写，非常好用。\nImage Auto Upload 文件主动上传到图床的工具，需要配合PicGo来使用。\n美化\u0026amp;操作效率插件 以下插件为选装插件，用于提升外观和使用效率。有很多图片相关的插件，因为Obsidian的图片管理实在令人感到很苦闷。\n主题：Board 单纯的记录以下我现在正在用的主题插件\nHide Folders Obsidian只是一个单纯的Mardown编辑器，很多代码相关的文件不会显示，所以目录下会有很多平时写作时完全不需要的目录，可以通过Hide Folders插件进行隐藏。\nClear Unused Image 后来我发现不需要安装，因为上传插件中可以开启图片上传后移除\n不推荐Git使用不熟练的同学安装，如果要安装，务必理解配置的含义，或者完全照抄我的。 这是一个删除未使用图片的插件，我按照我的使用习惯，进行编译时，会把图片放在本地，等上传图床后，进行删除。\nPaste Image Rename 一个用于将截图添加到文章中进行重命名的插件\nAttachment Manager OB的附件管理软件，可以将一个笔记下的附件（主要是图片）放到单独的文件夹下，我会将这个路径映射到图床上，图片的管理和会方便很多，可以配合 Paste Image Rename 使用，相当丝滑，强烈推荐。\n软件 PicGO PicGo是一款图床管理软件，支持主流的多种云服务图像存储或图床服务。\nPicList PicList是基于PicGo二次开发的图床管理软件，我主要是为了方便进行文件的管理(带删除和管理相当的方便)。最终选用了PicList。\n需要在PicList中添加一个名为 rename-file 的插件，来配合OB附件管理插件来进行图片的分目录管理\n配置 非功能插件配置 Hide Folders 需要在Hide Folder的配置界面，进行隐藏文件夹进行配置。（没找到白名单模式，不知道后续作者会不会更新一个白名单模式）。在Folders to hide 中添加 。配置完成之后只有archetypes和content两个文件夹目录了，瞬间就变得很清爽，可以更加专注博客的编辑而不被hugo的项目文件影响。\nassets data i18n layouts public resources static themes Paste Image Rename 一个非常好用的插件，不需要配置，在截完图粘贴进Obsidian之后就会有一个对话框让你输入新的文件名，第一次会提示是否需要更新文章中的链接，直接点击以后一直更新就好了。\nAttachment Manager 附件管理插件，我没有进行其他配置，安装完启用即可，真正的开箱即用。\n1. 实现图形化新建文章 Hugo的文章创建需要使用 Commander 命令来进行创建，为了让Hugo给文章进行初始化的设置（可能还有其他的配置文件修改，根据我自己的使用经验，在posts目录下创建的文章可以被编译，但对于新增的Layout直接新建文件会无法编译）。所以，我认为还是通过在图像界面上新增一个功能来代替我们输入命令会更合适一些。\n需要用到的插件\nShell Command：用于将 hugo new 命令封装成Obsidian的命令 Commander：用于将封装好的Obsidian命令添加到Obsidian的界面上 Shell Command 使用前确保hugo相关命令可以被命令行程序调用，即hugo.exe需要在环境变量中，可以通过打开cmd输入 hugo version 进行尝试。\n打开Shell Command的配置界面，新增一条Shell Command 在命令界面中输入 hugo new posts/{{_filename}}.md 这是我们需要执行的新增文档命令，其中 {{_filename}} 是一个变量，下一步中会配置接收变量的方式\n打开Shell Command的配置界面，新增一条Precations。点击new promt按钮，可以进入图片中的编辑页面，名称可以随意取，最关键是的需要绑定到{{_filename}} 变量，在Target Variable中新建这个变量即可 在Shell Command命令的配置面板，点击命令的小齿轮按钮，打开详细设置，连接 proactions和命令，可以在通用设置中添加一个别名方便寻找 配置完成后，可按 Ctrl + P 唤出Obsidian的操作面板进行尝试\nCommander 打开Commander的配置面板，在左侧栏目中，新增一个按钮 具体步骤为，点击添加命令，选中 Shell Command创建的命令，输入界面中按钮名称 配置完成后，可以在左侧看到一个新的按钮 2. 图床配置 博客的图片管理一直是让人头疼的事情，综合费用和便捷程度考虑，我选用腾讯云的是COS作为图床服务，免费的额度足够日常使用，因为我平时写文基本都是打开源码模式（当然，就算不用源码模式写文也用不完免费额度，主要还是在博客生产环境的浏览量），当然也可以选用其他的图床服务，配置的不同仅仅在于PicGo的目标端。\nPicList软件配置 软件下载安装完成之后，配置腾讯云COS的链接信息，并设置为默认图床。\n需要准备以下内容：\nSecretId：在腾讯云，头像Hover下的菜单-访问管理-API管理中创建 SecretKey: 在腾讯云，头像Hover下的菜单-访问管理-API管理中创建，只出现一次，下载下来记住了 Bucket：在腾讯云-控制台-对象存储-存储桶列表 AppId：在腾讯云，头像Hover下的菜单-访问管理-API管理中创建 存储区域：在腾讯云-控制台-对象存储-存储桶列表 将内容配置到PicList中，并设置为默认图床，可以上传一个图片进行测试。\n然后是可选的插件配置，在PicList的界面中，打开菜单插件，搜索 rename-file插件，安装并进行配置。配置文件格式路径为 /{localFolder:1}/{origin} ，在我实际的使用过程中，开启附件管理后，图床上的位置为 /${blogfile}/content/posts/xx.md_Attachements/xx.png 。完全符合我的预期，图片可以根据文档分类存放，在后期的管理和博客更新过程中也会非常方便。\nIamge Auto Upload插件配置 可选 可以开启可选项，上传后删除源文件。其他都不需要配置\nCommander新增一键上传 在页首栏新增一个按钮 最终会在编辑器的上方，一本阅读模式按钮（一本书） 边上出现一个新按钮，用于一件上传本文中的所有图片到图床。\n3. Hugo Preview 安装好Hugo Preview插件后。会在右下角出现一个Go的图标（蓝色），点击之后就会出现Hugo站点的预览。（双屏食用更佳）\nFAQ: 已知问题 记录本人在配置过程中遇到的问题及解决方案\n1. Git跟踪文件异常 现象：在Obsidian中，文件没有修改，Git跟踪的文件中却提示被修改哦，打开diff看发现也没有区别 原因：Windows系统下Git开启了换行符自动转换，Ob转换为LF，而Git转换为CRLF 解决方案：在仓库目录下输入命令 git config core.autocrlf input 所有换行符统一转换为LF 2. Git无法使用\u0026amp;\u0026amp;Hugo Preview无法使用 现象： Git使用时，提示报错obsidian cannot run git command，hugo preview 提示报错 原因： 无法调用到Git命令 解决方案： （推荐方案） Git命令未加入环境变量，编辑系统环境变量，将 Git的bin目录加入系统环境变量 在Obsidian的Git插件中配置Git的地址为git.exe的绝对路径 ","permalink":"https://zanksc.github.io/2024/01/01/hugo-3/","summary":"装修一下驾驶舱，让我们扬帆起航。我们应当知道，航海比造船更具魅力与挑战。","title":"【Hugo】体验篇：Obsidian写作"},{"content":" 旧时代的船，想要载新世界的梦\n前言 2024年底，突然对游戏没了兴趣，在家里装了一台Homelab的机器后，开始广泛的对各种技术重新开始产生兴趣。在网上搜资料看到众多大佬自己的网站，找到了很多宝藏，心血来潮的有了自己建一个博客的想法。于是，拿出了被丢掉很多年的建站技能，和废弃很多年的域名，搭建了一个个人博客站，也就有了经典的博客第一篇文章就是搭建博客，meta-blog！\nPS: 按以下教程无需域名也能搭建\n阅读前请审视整体方案，需要会使用Github和命令行\n建站工具： hugo 建站工具皮肤： PaperMod 源代码（原文档）托管平台： Github 站点部署： Github Pages CI/CD(持续集成/持续部署)： Github Actions 整体思路为，在Github中创建两个代码仓，一个用于管理源代码（博主的工作台，建议设置为Private），另一个用于部署静态站点（需要特殊命名，利用Github Pages托管），再利用Github Actions监听源代码仓变动后，自动更新Github Pages页面。\nHugo安装及配置 以下命令均由GitBash终端执行，如使用CMD或PowerShell可以自行替换对应命令\nHugo安装 Hugo的安装比较简单，go的编译产物基本都是一个二进制的可执行文件。从Github的Release页面下载对应操作系统的可执行文件即可。\n我常用的工作、开发机操作系统均为Windows，则以Windows为例，下载 hugo的windows版本文件，将.exe文件解压到任意位置，如D:\\sdk\\hugo。打开环境变量配置，在PATH变量中新增D:\\sdk\\hugo 目录，使得命令行可以直接使用hugo.exe而不需要CD到指定目录（不会新增环境变量的，请自行百度）。\n下载及配置完之后，打开命令行，输入hugo version 或 hugo.exe version进行验证，如输出版本号则代表安装成功。例如我的输出为：\n$ hugo version hugo v0.139.3-2f6864387cd31b975914e8373d4bf38bddbd47bc+extended+withdeploy windows/amd64 BuildDate=2024-11-29T15:36:56Z VendorInfo=gohugoio 创建站点 使用hugo命令 hugo new site $YOUR_SITE_NAME 来创建站点。该站点后续会被作为原文档仓库托管到Github进行管理\n$ hugo new site zanks-blog Congratulations! Your new Hugo site was created in D:\\03_code\\personal\\zanks-blog. Just a few more steps... 1. Change the current directory to D:\\03_code\\personal\\zanks-blog. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 命令输入完成后，会在当前目录下创建zanks-blog文件夹，这个文件夹会作为原文档仓库。使用tree命令（没有的也可以直接用ll）看一下hugo生成的目录，内容不多。\n$ tree . . |-- archetypes | `-- default.md |-- assets |-- content |-- data |-- hugo.toml |-- i18n |-- layouts |-- static `-- themes 8 directories, 2 files 配置皮肤 在正式启动前，可以给站点安装一个自己喜欢的皮肤（如果不安装，直接进行下一步本地调试，会出现Page Not Found的错误，我已经试过了，不必再试）\n我使用的皮肤是PaperMode\n首先，使用git init将这个站点目录变为Git仓库，然后使用submodule命令获取皮肤，这边会从Github上下载东西，如果遇到网络问题，需要使用魔法手段解决。\n这里稍微解释一下，submodule 是一个不太常见的Git命令，通常被用于管理Git仓库中的子模块（submodule）。子模块是指一个Git仓库作为另一个Git仓库的子目录。使用子模块，可以将一个项目嵌入到另一个项目中，同时保持两者的独立性。（AI告诉我的，其实我也不懂）\n$ git init Initialized empty Git repository in D:/03_code/personal/zanks-blog/.git/ $ git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod Cloning into \u0026#39;D:/03_code/personal/zanks-blog/themes/PaperMod\u0026#39;... remote: Enumerating objects: 139, done. remote: Counting objects: 100% (139/139), done. remote: Compressing objects: 100% (98/98), done. remote: Total 139 (delta 36), reused 121 (delta 36), pack-reused 0 (from 0) Receiving objects: 100% (139/139), 249.18 KiB | 5.08 MiB/s, done. Resolving deltas: 100% (36/36), done. warning: in the working copy of \u0026#39;.gitmodules\u0026#39;, LF will be replaced by CRLF the next time Git touches it 根据PaperMod的官方建议，使用yaml替换toml作为配置文件。安装主题后，备份hugo.toml文件，新增hugo.yml并添加以下内容，其中title可以随意替换为自己喜欢的。\nbaseUrl: https://example.org/ languageCode: zh-cn title: 乱话三千 theme: PaperMod 以上配置只能保证站点可以启动，下文中将给出更多高阶配置，需要理解并筛选和更改为适用于自己站点的配置项（当然你直接照抄也是可以的）\nbaseUrl: https://example.org/ languageCode: zh-cn # en-us title: 乱话三千 theme: PaperMod enableRobotsTXT: true # 允许爬虫协议 enableEmoji: true # 允许使用Emoji表情 buildDrafts: false buildFuture: false buildExpired: false params: profileMode: enabled: true subtitle: \u0026#34;记载着某个人的胡言乱语\u0026#34; imageUrl: \u0026#34;/homepage.jpg\u0026#34; # optional imageWidth: 150 # custom size imageHeight: 150 # custom size buttons: - name: 点击开始 url: \u0026#34;/posts\u0026#34; menu: main: - identifier: post name: 文章 url: /posts/ weight: 10 - identifier: tags name: 标签 url: /tags/ weight: 20 - identifier: about name: 关于 url: /about/ weight: 30 这份配置使用了ProfileMode，在首页配置了一个图标和一个按钮，按钮将链接到 /posts 路径。并且在右上角的菜单中添加了三个按钮，分别连接到对应的路径，其中weight表示排序权重，数字越小按钮越靠近左侧。\n创建文章 使用 hugo new $YOUR_ARTICAL命令来创建文章\n$ hugo new posts/test.md Content \u0026#34;D:\\\\03_code\\\\personal\\\\zanks-blog\\\\content\\\\posts\\\\test.md\u0026#34; created 该命令在content/posts目录下创建了test.md文件，可以再使用 tree content命令或者 ll content 查看\n$ tree content/ content/ |-- posts | `-- test.md `-- posts.md 1 directory, 2 files 然后再使用cat命令查看自动生成的文件中有什么内容\n$ cat content/posts/test.md +++ date = \u0026#39;2024-12-09T09:25:05+08:00\u0026#39; draft = true title = \u0026#39;Test\u0026#39; +++ 其中date、titile很好理解，分别为日期和文章的标题。draft 这个查阅了一下官网的解释，大致的意思为表示当前的文章为草案，在构建时除非人为添加参数指定，否则不会打包到最后的静态文件中。以下是官网的原文解释：\ndraft: (`bool`) If `true`, the page will not be rendered unless you pass the `--buildDrafts` flag to the `hugo` command. Access this value from a template using the [`Draft`](https://gohugo.io/methods/page/draft/) method on a `Page` object. 然后，给文件中，添加一些内容。这里不需要修改draft，后续在编译中可以通过参数指定查看到草稿内容。但生产环境需要发布时，将draft的值改为false\n$ cat content/test.md +++ date = \u0026#39;2024-12-09T09:25:05+08:00\u0026#39; draft = true title = \u0026#39;Test\u0026#39; +++ 这是一篇测试文章 本地调试 本地调试是hugo提供的非常方便的工具，可以让我们在正式发布前看到站点的样子。只需要执行 hugo server 或 hugo serve 即可在本地启动服务端（在调试时可以添加-D参数看到草稿中的文章）。以下是我进行尝试的输出。\n$ hugo serve -D Watching for changes in D:\\03_code\\personal\\zanks-blog\\{archetypes,assets,content,data,i18n,layouts,static,themes} Watching for config changes in D:\\03_code\\personal\\zanks-blog\\hugo.yml Start building sites … hugo v0.139.3-2f6864387cd31b975914e8373d4bf38bddbd47bc+extended+withdeploy windows/amd64 BuildDate=2024-11-29T15:36:56Z VendorInfo=gohugoio | EN -------------------+----- Pages | 11 Paginator pages | 0 Non-page files | 0 Static files | 1 Processed images | 0 Aliases | 0 Cleaned | 0 Built in 64 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 启动后，终端输出了服务器地址，使用浏览器进入就可以预览站点部署后的样子了。不出意外的话，可以看到创建的测文章。\n配置文章模板 在archetypes目录下备份并修改default.md文件来修改新增文章的模板，以下是我根据官方模板进行修改的模板\n--- title: \u0026#34;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: 2020-09-15T11:30:03+00:00 tags: [\u0026#34;\u0026#34;] author: \u0026#34;Zanks\u0026#34; draft: true # 默认为草稿模式 weight: #可以用于置顶 showToc: true # 显示目录 TocOpen: false # 打开目录 comments: false # 评论 description: \u0026#34;\u0026#34; searchHidden: false # 优化SEO ShowReadingTime: true ShowWordCount: true --- 添加About页面 前面已经配置了About的链接，但是在访问时会出现404，下文中将会配置这个页面。 依然是使用hugo new 命令来创建md文件\n$ hugo new about.md Content \u0026#34;D:\\\\03_code\\\\personal\\\\zanks-blog\\\\content\\\\about.md\u0026#34; created 在其中添加一些介绍自己的内容，然后进入页面，点击关于就可以看到新增加到内容了（在发布时，记得将draft更改为false）\n我尝试直接在content目录下创建 about.md 文件，在调试环境中可以看到这个页面，但是实际发布后却没有在public目录找到对应文件，暂时没有找到解决方案。删除并配置了文章模板后，通过命令创建about.md后可以正常工作。\n源代码仓管理 本地仓初始化 执行 git init 命令来初始化目录为git仓 $ git init Initialized empty Git repository in D:/03_code/personal/zanks-blog/.git/ 添加一个.gitignore文件，将public文件夹取消跟踪，该仓将作为源代码仓进行管理，所以构建产物不需要加入跟踪。并将该文件commit（建议通过VSCode等带有图形化管理的操作） $ cat .gitignore /public 为每个空的目录添加.gitkeep文件，来保证源代码仓的完整目录结构（asset、data、i18n、layouts），提交所有改动文件。 完成以上动作之后，本地仓构建完成。后面将在Github上创建代码仓，与该本地仓进行关联。\nGithub代码仓创建 在Github上创建一个空代码仓，使用命令进行关联。在Github页面上会有提示如何关联已有仓库，根据给出的命令直接复制到终端执行即可。\n$ git remote add origin git@github.com:ZaNksC/zanks-blog.git git branch -M main git push -u origin main Enumerating objects: 165, done. Counting objects: 100% (165/165), done. Delta compression using up to 12 threads Compressing objects: 100% (148/148), done. Writing objects: 100% (165/165), 274.80 KiB | 1.01 MiB/s, done. Total 165 (delta 36), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (36/36), done. To github.com:ZaNksC/zanks-blog.git * [new branch] main -\u0026gt; main branch \u0026#39;main\u0026#39; set up to track \u0026#39;origin/main\u0026#39; 登录Github就可以看到该代码仓中已经有内容了。\n完成这一步后，就可以在任何装有Git和Hugo的机器上对博客进行开发了。\n自动化部署 Github Pages托管 使用Github Pages进行静态站点托管，需要在Github中创建一个名为 username.github.io的特殊项目。 创建之后，就可以用 https://username.github.io 作为域名直接访问了，当然现在这里是一个空项目，访问之后会出现404。\nGithub Action自动化部署 Github的Action是一套标准的CI/CD系统，通过内置在源代码仓中.github/workflow目录下的yaml文件来定义流水线的动作。以下是我从Github Workflow的hugo流水线模板修改来的CICD一体化流水线。\n$ cat .github/workflows/hugo.yml # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.139.3 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: hugo --baseURL=https://zanksc.github.io - name: Deploy Pages uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: ZaNksC/ZaNksC.github.io PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 需要自行修改 Build With Hugo 步骤中的构建命令，baseURL替换为自己的博客地址，Deploy Pages步骤中的EXTERNAL_REPOSITORY变量，需要替换为自己的GitPage地址。\n需要注意的是，在最后一个步骤Deploy Pages中，有${{ secrets.PERSONAL_TOKEN }}变量，这个变量位于源代码仓-settings-Secrete And variables-Action中。需要在这个目录中创建一个名为PERSONAL_TOKEN的变量。 变量的值则需要在Github（点击头像） - settings-Deploy Settings-Personal access tokens中创建，创建一个经典（classic）的Token，赋予 repo 的所有权限保证可以读写仓库。复制该Token的值（只会出现一次），填入上文提到的 PERSONAL_TOKEN的变量中。 在全部配置完成之后，可以通过 hugo new posts/test.md 输入一些内容并将draft值改为true，输入 git add . \u0026amp;\u0026amp; git commit -m \u0026quot;add test.md\u0026quot; 进行提交，然后等待一段时间后，访问 https://name.github.io 查看博客中是否出现该文章来进行全流程验证。\n参考资料 Hugo官方指导手册 PaperMode安装指南 pseudoyu的一站式指导 ","permalink":"https://zanksc.github.io/2024/01/01/hugo-1/","summary":"旧时代的船，想要载新世界的梦","title":"【Hugo】基础篇：个人博客搭建"},{"content":" 性别：男 年龄：保密 有一个博学多识且貌美如花的女朋友 养了一只叫“基金”的小猫 从事大数据、Java后端相关工作。曾经在最该奋斗的年纪进入了最能奋斗的地方，并且全身而退。目前已经回老家摆烂，开始重新思考工作和生活的意义。\n在学校时就折腾过博客，因为懒癌（主要）和大厂连轴转的工作磨掉了对于技术的热爱（借口），从大厂离职摆烂了一年多之后，终于重新捡起了对于技术的热爱。\n喜欢折腾HomeLab和各种奇奇怪怪的东西，爱好颇多，但擅长的没有。\n本博客在2025年1月1日重启，希望可以坚持得久一些。\n","permalink":"https://zanksc.github.io/about/","summary":"\u003cul\u003e\n\u003cli\u003e性别：男\u003c/li\u003e\n\u003cli\u003e年龄：保密\u003c/li\u003e\n\u003cli\u003e有一个博学多识且貌美如花的女朋友\u003c/li\u003e\n\u003cli\u003e养了一只叫“基金”的小猫\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e从事大数据、Java后端相关工作。曾经在最该奋斗的年纪进入了最能奋斗的地方，并且全身而退。目前已经回老家摆烂，开始重新思考工作和生活的意义。\u003c/p\u003e\n\u003cp\u003e在学校时就折腾过博客，因为懒癌（主要）和大厂连轴转的工作磨掉了对于技术的热爱（借口），从大厂离职摆烂了一年多之后，终于重新捡起了对于技术的热爱。\u003c/p\u003e\n\u003cp\u003e喜欢折腾HomeLab和各种奇奇怪怪的东西，爱好颇多，但擅长的没有。\u003c/p\u003e\n\u003cp\u003e本博客在2025年1月1日重启，希望可以坚持得久一些。\u003c/p\u003e","title":"😾 关于基金的铲屎官 😾 "}]