[{"content":"","permalink":"https://www.zanks.link/message/","summary":"","title":"💬 留言板"},{"content":" 装修一下驾驶舱，让我们扬帆起航。我们应当知道，航海比造船更具魅力与挑战。\n前言 Hugo作为建站博客工具的时候，博文的载体是 markdown ，而 markdown 本身是一个纯文本的标记语言，在Hugo工具提供的命令中，会转换成静态的网页文件来提供更加优质的阅读体验。所以，在理论上，选用任何的文本编辑器，其实都可以作为博客的写作工具。\n然而，在真实使用的情况下，我们需要先在命令行中，输入 hugo new posts/xxx.md 命令来创建一篇文章，然后打开对应的文本编辑器来编辑文章，还需要在命令中使用 hugo serve -D 来看一下显示效果，如果用到图片，还需要手动管理图片的地址来保证本地和发布之后保持一致，整个过程就会显得非常的繁琐。\n基于以上我博客的编写流程，提炼了几个痛点和几点期望\n创建文章需要输入命令，我希望可以通过图形化界面快速的创建文章 博客图片的管理，利用图床进行图片 本文将会围绕这两个痛点，对写作体验进行逐步的优化。我计划使用Obsidian作为我的写作工具。以下将是我计划中的写作及发布流程（配合自动发布）：\n如果你希望跟我拥有一样的配置，那么需要提前准备好以下软件或账号：\n一个基于Hugo构建的笔记目录 Obsidian : 一款舒适的Markdown编辑器 PicList: 一款基于PicGo二次开发的图床管理工具 腾讯云COS服务： 请自行前往腾讯云开启（有免费额度，超过之后需要付费） 插件\u0026amp;软件 以下插件均指代Obsidian插件市场中的插件，软件为系统软件，均需要自己安装。 对于Obsidian插件需要关闭安全模式，来开启第三方插件，以下插件均可以通过插件市场下载，插件在Github中，如遇到网络问题请自行解决。 安装完OB插件记得重启\n功能插件 以下插件均为必须安装的插件，用于实现前文提到的功能。\nShell Command Shell Command是一款可以在Obsidian中运行操作系统命令的插件，由于hugo和Git的操作之前都是基于命令行手敲的，所以我选用了他作为实现层的插件，在Shell Command中包装好常用的命令，然后通过其他插件来进行更近一步的封装。\nCommander Shell Command是一款可以将命令设置为图标的插件，用于将Hugo创建博客的命令可视化\nGit 用于可视化Git操作\nHugo Preview 用于在本地进行Hugo网站预览，可以实时预览，非常好用，免去了打开命令行输入hugo server -D 命令的麻烦（实际上这个按钮代替你执行了这个命令），如果有双屏的话，可以一个屏幕预览一个屏幕书写，非常好用。\nImage Auto Upload 文件主动上传到图床的工具，需要配合PicGo来使用。\n美化\u0026amp;操作效率插件 以下插件为选装插件，用于提升外观和使用效率。有很多图片相关的插件，因为Obsidian的图片管理实在令人感到很苦闷。\n主题：Board 单纯的记录以下我现在正在用的主题插件\nHide Folders Obsidian只是一个单纯的Mardown编辑器，很多代码相关的文件不会显示，所以目录下会有很多平时写作时完全不需要的目录，可以通过Hide Folders插件进行隐藏。\nClear Unused Image 后来我发现不需要安装，因为上传插件中可以开启图片上传后移除\n不推荐Git使用不熟练的同学安装，如果要安装，务必理解配置的含义，或者完全照抄我的。 这是一个删除未使用图片的插件，我按照我的使用习惯，进行编译时，会把图片放在本地，等上传图床后，进行删除。\nPaste Image Rename 一个用于将截图添加到文章中进行重命名的插件\nAttachment Manager OB的附件管理软件，可以将一个笔记下的附件（主要是图片）放到单独的文件夹下，我会将这个路径映射到图床上，图片的管理和会方便很多，可以配合 Paste Image Rename 使用，相当丝滑，强烈推荐。\n软件 PicGO PicGo是一款图床管理软件，支持主流的多种云服务图像存储或图床服务。\nPicList PicList是基于PicGo二次开发的图床管理软件，我主要是为了方便进行文件的管理(带删除和管理相当的方便)。最终选用了PicList。\n需要在PicList中添加一个名为 rename-file 的插件，来配合OB附件管理插件来进行图片的分目录管理\n配置 非功能插件配置 Hide Folders 需要在Hide Folder的配置界面，进行隐藏文件夹进行配置。（没找到白名单模式，不知道后续作者会不会更新一个白名单模式）。在Folders to hide 中添加 。配置完成之后只有archetypes和content两个文件夹目录了，瞬间就变得很清爽，可以更加专注博客的编辑而不被hugo的项目文件影响。\nassets data i18n layouts public resources static themes Paste Image Rename 一个非常好用的插件，不需要配置，在截完图粘贴进Obsidian之后就会有一个对话框让你输入新的文件名，第一次会提示是否需要更新文章中的链接，直接点击以后一直更新就好了。\nAttachment Manager 附件管理插件，我没有进行其他配置，安装完启用即可，真正的开箱即用。\n1. 实现图形化新建文章 Hugo的文章创建需要使用 Commander 命令来进行创建，为了让Hugo给文章进行初始化的设置（可能还有其他的配置文件修改，根据我自己的使用经验，在posts目录下创建的文章可以被编译，但对于新增的Layout直接新建文件会无法编译）。所以，我认为还是通过在图像界面上新增一个功能来代替我们输入命令会更合适一些。\n需要用到的插件\nShell Command：用于将 hugo new 命令封装成Obsidian的命令 Commander：用于将封装好的Obsidian命令添加到Obsidian的界面上 Shell Command 使用前确保hugo相关命令可以被命令行程序调用，即hugo.exe需要在环境变量中，可以通过打开cmd输入 hugo version 进行尝试。\n打开Shell Command的配置界面，新增一条Shell Command 在命令界面中输入 hugo new posts/{{_filename}}.md 这是我们需要执行的新增文档命令，其中 {{_filename}} 是一个变量，下一步中会配置接收变量的方式\n打开Shell Command的配置界面，新增一条Precations。点击new promt按钮，可以进入图片中的编辑页面，名称可以随意取，最关键是的需要绑定到{{_filename}} 变量，在Target Variable中新建这个变量即可 在Shell Command命令的配置面板，点击命令的小齿轮按钮，打开详细设置，连接 proactions和命令，可以在通用设置中添加一个别名方便寻找 配置完成后，可按 Ctrl + P 唤出Obsidian的操作面板进行尝试\nCommander 打开Commander的配置面板，在左侧栏目中，新增一个按钮 具体步骤为，点击添加命令，选中 Shell Command创建的命令，输入界面中按钮名称 配置完成后，可以在左侧看到一个新的按钮 2. 图床配置 博客的图片管理一直是让人头疼的事情，综合费用和便捷程度考虑，我选用腾讯云的是COS作为图床服务，免费的额度足够日常使用，因为我平时写文基本都是打开源码模式（当然，就算不用源码模式写文也用不完免费额度，主要还是在博客生产环境的浏览量），当然也可以选用其他的图床服务，配置的不同仅仅在于PicGo的目标端。\nPicList软件配置 软件下载安装完成之后，配置腾讯云COS的链接信息，并设置为默认图床。\n需要准备以下内容：\nSecretId：在腾讯云，头像Hover下的菜单-访问管理-API管理中创建 SecretKey: 在腾讯云，头像Hover下的菜单-访问管理-API管理中创建，只出现一次，下载下来记住了 Bucket：在腾讯云-控制台-对象存储-存储桶列表 AppId：在腾讯云，头像Hover下的菜单-访问管理-API管理中创建 存储区域：在腾讯云-控制台-对象存储-存储桶列表 将内容配置到PicList中，并设置为默认图床，可以上传一个图片进行测试。\n然后是可选的插件配置，在PicList的界面中，打开菜单插件，搜索 rename-file插件，安装并进行配置。配置文件格式路径为 /{localFolder:1}/{origin} ，在我实际的使用过程中，开启附件管理后，图床上的位置为 /${blogfile}/content/posts/xx.md_Attachements/xx.png 。完全符合我的预期，图片可以根据文档分类存放，在后期的管理和博客更新过程中也会非常方便。\nIamge Auto Upload插件配置 可选 可以开启可选项，上传后删除源文件。其他都不需要配置\nCommander新增一键上传 在页首栏新增一个按钮 最终会在编辑器的上方，一本阅读模式按钮（一本书） 边上出现一个新按钮，用于一件上传本文中的所有图片到图床。\n3. Hugo Preview 安装好Hugo Preview插件后。会在右下角出现一个Go的图标（蓝色），点击之后就会出现Hugo站点的预览。（双屏食用更佳）\nFAQ: 已知问题 记录本人在配置过程中遇到的问题及解决方案\n1. Git跟踪文件异常 现象：在Obsidian中，文件没有修改，Git跟踪的文件中却提示被修改哦，打开diff看发现也没有区别 原因：Windows系统下Git开启了换行符自动转换，Ob转换为LF，而Git转换为CRLF 解决方案：在仓库目录下输入命令 git config core.autocrlf input 所有换行符统一转换为LF 2. Git无法使用\u0026amp;\u0026amp;Hugo Preview无法使用 现象： Git使用时，提示报错obsidian cannot run git command，hugo preview 提示报错 原因： 无法调用到Git命令 解决方案： （推荐方案） Git命令未加入环境变量，编辑系统环境变量，将 Git的bin目录加入系统环境变量 在Obsidian的Git插件中配置Git的地址为git.exe的绝对路径 ","permalink":"https://www.zanks.link/2024/01/01/hugo-3/","summary":"装修一下驾驶舱，让我们扬帆起航。我们应当知道，航海比造船更具魅力与挑战。","title":"【Hugo】体验篇：Obsidian写作"},{"content":" 装修一下旧时代的船，才能开门迎接更多的客人。\n前言 搭建完博客之后，总是会觉得这不满意，然后在搭建过程中，用相同的建站工具和主题搜索，会发现网上有很多大佬已经搭建好的站点，就会这个功能也想要，那个功能也想要。在这里，我记录了一些我搭建过程中进行基础功能拓展和美化的过程。希望可以帮助到有缘人~\n以下教程为进阶版的简略教程，需要你有比较扎实的编程基础（或者不爱思考的脑袋），很多教程来自网上其他大佬，由于看了太多的教程，链接引用不全请见谅，如果有大佬看到了可以联系我加上。\n以下修改html和css的代码都不建议在themes文件夹直接修改，html可以在layout目录下新建同名文件（复制过来改），css可以在assets目录下新建，最终构建都会打包到public中并使用自定义的覆盖主题文件夹中的内容。\n拓展功能 评论 Gisucs 选用Gisucs作为评论服务，最开始我的选择是Gisucs，但是后来我放弃了。Github作为存储虽然是全免费，非常优雅，但是要求评论者拥有一个Github账号对于用于体验实在是不太友好。\nGithub配置 参考链接： https://giscus.app/zh-CN#repository\n在某个Github公开仓库开启discussion功能（settings进入） 在Github安装Gisucs APP 记录生成的配置和代码，需要配置到自己的项目中 Hugo配置 参考链接： https://www.tofuwine.cn/posts/610b75f5/#pe-comments\n添加文件 layouts/partials/comments.html,输入以下内容 \u0026lt;div class=\u0026#34;comments-title\u0026#34; id=\u0026#34;tw-comment-title\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;x-comments-title\u0026#34;\u0026gt;{{- .Param \u0026#34;giscus.discussionTitle\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;font-size: 1rem\u0026#34;\u0026gt;{{- .Param \u0026#34;giscus.discussionSubtitle\u0026#34; }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tw-comment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const getStoredTheme = () =\u0026gt; localStorage.getItem(\u0026#34;pref-theme\u0026#34;) === \u0026#34;dark\u0026#34; ? \u0026#34;{{ .Site.Params.giscus.darkTheme }}\u0026#34; : \u0026#34;{{ .Site.Params.giscus.lightTheme }}\u0026#34;; const setGiscusTheme = () =\u0026gt; { const sendMessage = (message) =\u0026gt; { const iframe = document.querySelector(\u0026#39;iframe.giscus-frame\u0026#39;); if (iframe) { iframe.contentWindow.postMessage({giscus: message}, \u0026#39;https://giscus.app\u0026#39;); } } sendMessage({setConfig: {theme: getStoredTheme()}}) } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const giscusAttributes = { \u0026#34;src\u0026#34;: \u0026#34;https://giscus.app/client.js\u0026#34;, \u0026#34;data-repo\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repo }}\u0026#34;, \u0026#34;data-repo-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repoId }}\u0026#34;, \u0026#34;data-category\u0026#34;: \u0026#34;{{ .Site.Params.giscus.category }}\u0026#34;, \u0026#34;data-category-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.categoryId }}\u0026#34;, \u0026#34;data-mapping\u0026#34;: \u0026#34;{{ .Site.Params.giscus.mapping }}\u0026#34;, \u0026#34;data-strict\u0026#34;: \u0026#34;{{ .Site.Params.giscus.strict }}\u0026#34;, \u0026#34;data-reactions-enabled\u0026#34;: \u0026#34;{{ .Site.Params.giscus.reactionsEnabled}}\u0026#34;, \u0026#34;data-emit-metadata\u0026#34;: \u0026#34;{{ .Site.Params.giscus.emitMetadata }}\u0026#34;, \u0026#34;data-input-position\u0026#34;: \u0026#34;{{ .Site.Params.giscus.inputPosition }}\u0026#34;, \u0026#34;data-theme\u0026#34;: getStoredTheme(), \u0026#34;data-lang\u0026#34;: \u0026#34;{{ .Site.Params.giscus.lang }}\u0026#34;, \u0026#34;data-loading\u0026#34;: \u0026#34;lazy\u0026#34;, \u0026#34;crossorigin\u0026#34;: \u0026#34;anonymous\u0026#34;, \u0026#34;async\u0026#34;: \u0026#34;\u0026#34;, }; // 动态创建 giscus script const giscusScript = document.createElement(\u0026#34;script\u0026#34;); Object.entries(giscusAttributes).forEach( ([key, value]) =\u0026gt; giscusScript.setAttribute(key, value)); document.querySelector(\u0026#34;#tw-comment\u0026#34;).appendChild(giscusScript); // 页面主题变更后，变更 giscus 主题 const themeSwitcher = document.querySelector(\u0026#34;#theme-toggle\u0026#34;); if (themeSwitcher) { themeSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } const themeFloatSwitcher = document.querySelector(\u0026#34;#theme-toggle-float\u0026#34;); if (themeFloatSwitcher) { themeFloatSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } }); \u0026lt;/script\u0026gt; 添加文件 assets/css/extended/comments.css,输入以下内容 /* giscus 评论组件 */ .comments-title { margin-top: 2rem; margin-bottom: 2rem; display: block; text-align: center; } .x-comments-title { display: block; font-size: 1.25em; font-weight: 700; padding: 1.5rem 0 .5rem; } 在 hugo.yaml 中添加内容，其中 {{}} 包裹的需要替换成自己的内容，内容在Gisucs会生成 giscus: repo: \u0026#34;{{ REPO }}\u0026#34; repoId: \u0026#34;{ REPO_ID }\u0026#34; category: \u0026#34;Announcements\u0026#34; categoryId: \u0026#34;{{ CATEGORYID }}\u0026#34; mapping: \u0026#34;pathname\u0026#34; strict: \u0026#34;0\u0026#34; reactionsEnabled: \u0026#34;1\u0026#34; emitMetadata: \u0026#34;0\u0026#34; inputPosition: \u0026#34;bottom\u0026#34; lightTheme: \u0026#34;light\u0026#34; darkTheme: \u0026#34;dark\u0026#34; lang: \u0026#34;zh-CN\u0026#34; discussionTitle: 欢迎来到评论区 discussionSubtitle: 感谢您的耐心阅读！如需交流，请留个评论吧！ 在 archetypes/default.md 中添加配置 comments: true 来开启评论区，已有的博客也需要修改这个来开启 Twikoo Twikoo 官网\n因为Gisucs要求评论者具有Github账号有点使用者不太友好，所以后面更换了一个Twikoo\nTwikoo的整体可以看作是一个CSS的架构，C-Hugo站点的静态JS代码，S-云函数，S-MonogoDB数据库。Twikoo的官方是懂我们这些穷鬼的，提供了很多免费部署的教程。我这边就按照官方推荐度最高的方法进行部署。MonogoDB选择MongoDB Atlas，有500MB的免费额度。Netlify部署云函数，每月 125,000 请求次数和 100 小时函数计算时长，看上去是完全够了。\nMongoDB Atlas 申请资源 MongoDB Atlas\n按照Twikoo官网指导，申请一个账号和500MB空间的MonogoDB数据库。\n注册MongoDB Atlas账号 无脑下一步，创建一个MonogoDB实例，这里创建数据库用户的时候密码记住，后面要用 修改Network Access为 0.0.0.0 允许所有IP访问 在connect中查看代码示例，选Node.js可以看到连接串，把数据库用户密码替换进去，把整个URL复制下来，等部署云函数的时候有用 Netlify 部署云函数 Netlify\n注册Netlify账号，注册的时候需要提供身份验证（有点恶心人了），密码需要设置得复杂一点，不然直接不给登录也不提示，我通过忘记密码改了一个很复杂的~~（时隔三天来校验博客的时候我已经忘记了，但是没关系，浏览器替我记住了）~~ Fork官方的仓到自己的Github，从仓库部署站点，环境变量中填入 MONGODB_URI 值为MonoDB Atlas中复制出来的URL 点xxx.netlify.app进入页面，看到云函数正常运行就是部署成功了 前端部署 需要把前端JS嵌入到Hugo的Html页面中，在 layout/comments.html 文件中添加代码 （如果有其他评论组件请自行删除）\n\u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/twikoo@1.6.40/dist/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#39;https://xxx.netlify.app/.netlify/functions/twikoo\u0026#39;, el: \u0026#39;#tcomment\u0026#39;, // 容器元素 }) \u0026lt;/script\u0026gt; 使用配置 进入管理员界面，首次进入配置密码 配置邮箱通知，Hotmail配置了无法测试通过，暂时没找到原因，后来配置了一个163的邮箱（需要填授权码，听说qq更方便一点，gmail没有尝试） 反垃圾配置，使用默认的反垃圾服务 akismet，支付一个0元账单就可以获得一个APPKey，填入配置里面就好 头像服务，默认的 weavatar，注册一个账号，上传一个自己喜欢的头像。但是这边遇到了一个比较奇怪的问题，同时输入昵称和邮箱，头像就会读取失败（但是后来发现生产上好像可以），所以我在通用设置里面把必填字段改成了只填邮箱，因为昵称填QQ号会自动生成qq邮箱。 侧面显示目录 参考资料： https://www.zhouxin.space/logs/introduce-side-toc-and-reading-percentage-to-papermod/\n创建文件 layouts/partials/toc.html 输入以下代码（代码全是抄的，别问我为什么这么写） {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); if (elements.length \u0026gt; 0) { // Make the first header active activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } // Add event listener for the \u0026#34;back to top\u0026#34; link const topLink = document.getElementById(\u0026#39;top-link\u0026#39;); if (topLink) { topLink.addEventListener(\u0026#39;click\u0026#39;, (event) =\u0026gt; { // Prevent the default action event.preventDefault(); // Smooth scroll to the top window.scrollTo({ top: 0, behavior: \u0026#39;smooth\u0026#39; }); }); } }, false); window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { // Get the current scroll position const scrollPosition = window.pageYOffset || document.documentElement.scrollTop; // Check if the scroll position is at the top of the page if (scrollPosition === 0) { return; } // Ensure elements is a valid NodeList if (elements \u0026amp;\u0026amp; elements.length \u0026gt; 0) { // Check if there is an object in the top half of the screen or keep the last item active activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - scrollPosition) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - scrollPosition) \u0026lt; window.innerHeight / 2) { return element; } }) || activeElement; elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); const tocLink = document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`); if (element === activeElement){ tocLink.classList.add(\u0026#39;active\u0026#39;); // Ensure the active element is in view within the .inner container const tocContainer = document.querySelector(\u0026#39;.toc .inner\u0026#39;); const linkOffsetTop = tocLink.offsetTop; const containerHeight = tocContainer.clientHeight; const linkHeight = tocLink.clientHeight; // Calculate the scroll position to center the active link const scrollPosition = linkOffsetTop - (containerHeight / 2) + (linkHeight / 2); tocContainer.scrollTo({ top: scrollPosition, behavior: \u0026#39;smooth\u0026#39; }); } else { tocLink.classList.remove(\u0026#39;active\u0026#39;); } }); } }, false); const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); function checkTocPosition() { const width = document.body.scrollWidth; if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } \u0026lt;/script\u0026gt; {{- end }} 创建 assets/css/extended/toc.css 文件，并输入以下内容（也是抄的，感谢大佬，赞美大佬） :root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } 同时在archetypes\\default.yml中添加参数 showToc: true # 显示目录 TocOpen: true # 打开目录 PV/UV 不蒜子Busuanzi 使用不蒜子Busuanzi进行站点访问统计。 参考链接： https://blog.kanikig.xyz/hugo-busuanzi/\n添加文件 layouts\\parials\\head.html 从主题文件夹 themes\\layouts\\parials\\head.html 中拷贝内容并修改，在Styles上方添加一个if块 ... {{- if site.Params.analytics.naver.SiteVerificationTag }} \u0026lt;meta name=\u0026#34;naver-site-verification\u0026#34; content=\u0026#34;{{ site.Params.analytics.naver.SiteVerificationTag }}\u0026#34;\u0026gt; {{- end }} \u0026lt;!-- 以下If块为新增内容 --\u0026gt; {{- if .Site.Params.busuanzi.enable -}} \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; {{- end -}} {{- /* Styles */}} ... 添加文件 layouts\\parials\\footer.html 从主题文件夹 themes\\layouts\\parials\\footer.html 中拷贝内容并修改，在footer标签内添加一个if块 ... {{- if not (.Param \u0026#34;hideFooter\u0026#34;) }} \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; {{- if not site.Params.footer.hideCopyright }} {{- if site.Copyright }} \u0026lt;span\u0026gt;{{ site.Copyright | markdownify }}\u0026lt;/span\u0026gt; {{- else }} \u0026lt;span\u0026gt;\u0026amp;copy; {{ now.Year }} \u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | absLangURL }}\u0026#34;\u0026gt;{{ site.Title }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; {{- end }} {{- print \u0026#34; · \u0026#34;}} {{- end }} {{- with site.Params.footer.text }} {{ . | markdownify }} {{- print \u0026#34; · \u0026#34;}} {{- end }} \u0026lt;!-- 以下IF块为新增内容 --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;busuanzi-footer\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt; 本站总访问量\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次 \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt; 本站访客数\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;人次 \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} \u0026lt;span\u0026gt; Powered by \u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt; \u0026amp; \u0026lt;a href=\u0026#34;https://github.com/adityatelange/hugo-PaperMod/\u0026#34; rel=\u0026#34;noopener\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;PaperMod\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/footer\u0026gt; ... {{- end }} 添加文件 layouts\\_defaults\\single.html 从主题文件夹 themes\\layouts\\_defaults\\single.html 中拷贝内容并修改，在post-meta内添加一个if块 ... \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;!-- 以下If块为新增内容 --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;meta-item\u0026#34;\u0026gt;\u0026amp;nbsp·\u0026amp;nbsp \u0026lt;span id=\u0026#34;busuanzi_container_page_pv\u0026#34;\u0026gt;本文阅读量\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{- end }} \u0026lt;/div\u0026gt; ... 在hugo.html文件中的param节点中添加开关 params: busuanzi: enable: true Google Analyze 只需要在 hugo.yaml 中添加以下代码即可，id更换为自己在Google Analytic中申请的跟踪ID\nservices: googleAnalytics: id: \u0026#34;G-XXXXXXXXXX\u0026#34; 时间线 添加一个根据时间线排列的归档页面，写的多写的久才有质感。多写写吧！\n添加 content\\archive.md 文件，输入以下内容 --- title: \u0026#34;\u0026#34; layout: \u0026#34;archives\u0026#34; url: \u0026#34;/archives/\u0026#34; summary: archives --- 在 hugo.html 中添加按钮，在 menu.main 节点下新增以下内容 - identifier: archive name: 时间轴 url: /archives/ weight: 11 留言板 利用评论系统，新增一个Layout来构建一个留言板页面。\n创建 layouts\\message.html 文件输入一下代码（代码从 single.html 中删除了很多东西，简化得到，顺便做了一下标题居中，这回是自己写的了）： {{- define \u0026#34;main\u0026#34; }} \u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;post-header\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;post-title entry-hint-parent\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;margin-left: auto;margin-right: auto;\u0026#34;\u0026gt; {{ .Title }} \u0026lt;/div\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; {{- if .Content }} \u0026lt;div class=\u0026#34;post-content\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;footer class=\u0026#34;post-footer\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/twikoo@1.6.40/dist/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#39;xxx\u0026#39;, el: \u0026#39;#tcomment\u0026#39;, }) \u0026lt;/script\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; {{- end }} 在命令行中创建一个新的md文件(不要直接新建文件，我试了，编译的时候不会生成文件，会导致404)，输入 hugo new message.md，并在其中输入以下代码 --- title: \u0026#34;💬 留言板\u0026#34; date: \u0026#39;2024-12-13T21:14:22+08:00\u0026#39; draft: false # 默认为草稿模式 layout: \u0026#34;message\u0026#34; comments: true # 评论 --- 在 hugo.yaml 中新增首页目录，添加以下代码 - identifier: message name: 💬 留言板 url: /message/ weight: 21 添加最近修改时间 复制主题中的 post_meta.html 到 layout/post_meta.html 新增最近修改时间的内容，并修改发布时间的内容和国际化，\n在 layout/post_meta.html 输入以下代码 {{- $scratch := newScratch }} {{- if not .Date.IsZero -}} {{- $dateStr := .Date.Format (default \u0026#34;January 2, 2006\u0026#34; site.Params.DateFormat) -}} {{- $translatedPublished := i18n \u0026#34;published\u0026#34; -}} {{- $dateHTML := printf \u0026#34;\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#34; (.Date) $dateStr -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;%s %s\u0026#34; $translatedPublished $dateHTML)) }} {{- end }} {{- if not .Lastmod.IsZero -}} {{- $lastmodStr := .Lastmod.Format (default \u0026#34;January 2, 2006\u0026#34; site.Params.DateFormat) -}} {{- $translatedLastModified := i18n \u0026#34;last_modified\u0026#34; -}} {{- $lastmodHTML := printf \u0026#34;\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#34; (.Lastmod) $lastmodStr -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;%s %s\u0026#34; $translatedLastModified $lastmodHTML)) }} {{- end }} {{- if (.Param \u0026#34;ShowReadingTime\u0026#34;) -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (i18n \u0026#34;read_time\u0026#34; .ReadingTime | default (printf \u0026#34;%d min\u0026#34; .ReadingTime))) }} {{- end }} {{- if (.Param \u0026#34;ShowWordCount\u0026#34;) -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (i18n \u0026#34;words\u0026#34; .WordCount | default (printf \u0026#34;%d words\u0026#34; .WordCount))) }} {{- end }} {{- if not (.Param \u0026#34;hideAuthor\u0026#34;) -}} {{- with (partial \u0026#34;author.html\u0026#34; .) }} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice .) }} {{- end }} {{- end }} {{- with ($scratch.Get \u0026#34;meta\u0026#34;) }} {{- delimit . \u0026#34;\u0026amp;nbsp;·\u0026amp;nbsp;\u0026#34; | safeHTML -}} {{- end -}} 在i18n文件夹的对应目录添加翻译 在 hugo.yaml 中新增配置 frontmatte.lastmod: ['lastmod', ':git', 'date', 'publishDate'] 用于指定lastmod变量的赋值顺序 自定义域名 首先需要有一个域名，在对应的域名服务商添加一条解析记录，解析类型：CNAME，解析值为 xxx.github.io (xxx替换为自己的Github用户名)\n再添加文件 static\\CNAME ,文件的内容为自定义的域名。没有这个文件，访问域名会出现404。\n友链 参考： https://aimerneige.com/zh/post/web/add-friend-link-in-papermod-blog/\n这个是没有脑子直接抄的\n创建一个文件 layouts/partials/friends.html 输入以下代码 \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .friends { --link-count-per-row: 1; } @media screen and (min-width: 576px) { .friends { --link-count-per-row: 2; } } @media screen and (min-width: 768px) { .friends { --link-count-per-row: 3; } } .friends { display: grid; grid-template-columns: repeat(var(--link-count-per-row), 1fr); grid-gap: 16px; } /* 空间占位 */ .friend-skeleton { height: 280px; display: inline-block; position: relative; } .friend { height: 100%; width: 100%; position: absolute; top: 0; left: 0; transition: 0.67s cubic-bezier(0.19, 1, 0.22, 1); border-radius: var(--radius); box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12) !important; overflow: hidden; display: flex; flex-direction: column; justify-content: flex-start; align-items: center; } .friend:hover { transform: translateY(-8px); box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2), 0 5px 8px 0 rgba(0, 0, 0, 0.14), 0 1px 14px 0 rgba(0, 0, 0, 0.12) !important; } .friend-avatar { object-fit: cover; width: 100%; height: 180px; margin: 0 !important; border-radius: 0 !important; } .friend-content { text-align: center; flex: 1; width: 100%; padding: 16px; background: var(--entry); transform: translate3d(0, 0, 0); } .friend-name { font-size: 1.2rem; font-weight: bold; transform: inherit; } .friend-description { font-size: 0.8rem; color: var(--secondary); transform: translate3d(0, 0, 0); } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026#34;friends\u0026#34;\u0026gt; {{ range .Site.Data.friends }} \u0026lt;div class=\u0026#34;friend-skeleton\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .link }}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friend\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;friend-avatar\u0026#34; src=\u0026#34;{{ .image }}\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;friend-content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friend-name\u0026#34;\u0026gt;{{ .title }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;friend-description\u0026#34;\u0026gt;{{ .intro }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;!-- style code by https://github.com/fissssssh --\u0026gt; \u0026lt;!-- view https://github.com/fissssssh/fissssssh.github.io for more detail --\u0026gt; 创建 default/friends.html 文件，输入一下代码，用于创建新的界面 {{- define \u0026#34;main\u0026#34; }} \u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;post-header\u0026#34;\u0026gt; {{ partial \u0026#34;breadcrumbs.html\u0026#34; . }} \u0026lt;h1 class=\u0026#34;post-title entry-hint-parent\u0026#34;\u0026gt; {{ .Title }} \u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; {{- $isHidden := (.Param \u0026#34;cover.hiddenInSingle\u0026#34;) | default (.Param \u0026#34;cover.hidden\u0026#34;) | default false }} {{- partial \u0026#34;cover.html\u0026#34; (dict \u0026#34;cxt\u0026#34; . \u0026#34;IsSingle\u0026#34; true \u0026#34;isHidden\u0026#34; $isHidden) }} {{- if (.Param \u0026#34;ShowToc\u0026#34;) }} {{- partial \u0026#34;toc.html\u0026#34; . }} {{- end }} \u0026lt;div style=\u0026#34;height: 40px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{ .Content }} \u0026lt;div style=\u0026#34;height: 40px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{ partial \u0026#34;friends.html\u0026#34; . }} \u0026lt;div style=\u0026#34;height: 40px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{- if (.Param \u0026#34;comments\u0026#34;) }} {{- partial \u0026#34;comments.html\u0026#34; . }} {{- end }} \u0026lt;/article\u0026gt; {{- end }}{{/* end main */}} 创建 posts/friends 文件，输入以下内容 --- title: \u0026#34;🧑‍🤝‍🧑 Zanks的朋友们 🧑‍🤝‍🧑\u0026#34; date: \u0026#39;2024-01-01T00:00:00+08:00\u0026#39; author: \u0026#34;Zanks\u0026#34; layout: \u0026#34;friends\u0026#34; comments: true # 评论 --- 排名不分先后，按时间顺序添加。如需新增请留言，或通过其他方式联系我。 创建 data/friends.yml 文件，用于存储友链的数据，以下仅为示范 - title: \u0026#34;伞\u0026#34; intro: \u0026#34;一只咸鱼的学习记录\u0026#34; link: \u0026#34;https://umb.ink/\u0026#34; image: \u0026#34;https://avatars.githubusercontent.com/u/53655863?v=4\u0026#34; - title: \u0026#34;HelloWorld的小博客\u0026#34; intro: \u0026#34;这里是一个小白的博客\u0026#34; link: \u0026#34;https://mzdluo123.github.io/\u0026#34; image: \u0026#34;https://avatars.githubusercontent.com/u/23146087?v=4\u0026#34; 界面显示优化 配置默认语言为中文 在 hugo.html 文件中添加配置 defaultContentLanguage: zh 可以汉化大部分主题的内容\n日期格式显示优化 在 hugo.html 文件中的Param节点下添加配置 DateFormat: \u0026quot;2006-01-02\u0026quot; (go的时间配置必须要用这个日期，yyyy-MM-dd不行)\n标签页添加词云 参考资料： https://blog.xlap.top/post/tech/wordcloud4hugo/#%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80 感谢开源作者和大佬代码，我直接抄了\n下载 wordcloud2.js 拷贝到 static/js/ 目录下，下载地址 修改 head.html 引入js文件，新增以下代码： {{- if eq .Section \u0026#34;tags\u0026#34;}} {{/* 标签云 */}} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/word-cloud.css\u0026#34;\\\u0026gt; \u0026lt;script src=\u0026#34;/js/wordcloud2.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} 创建 staic/css/word-cloud.css 文件输入以下代码： .word-color:nth-child(7n + 1) { color: rgb(202, 110, 255); } .word-color:nth-child(7n + 2) { color: rgb(83, 110, 255); } .word-color:nth-child(7n + 3) { color: rgb(143, 253, 241); } .word-color:nth-child(7n + 4) { color: rgb(183, 255, 112); } .word-color:nth-child(7n + 5) { color: rgb(255, 212, 126); } .word-color:nth-child(7n + 6) { color: rgb(248, 140, 131); } .word-color:nth-child(7n + 7) { color: rgb(104, 160, 255); } @keyframes word { 0% { opacity: 0.5; } 3% { opacity: 1; } 9% { opacity: 1; } 12% { opacity: 0.5; } 100% { opacity: 0.5; } } .word-animate { animation-name: word; animation-duration: 20s; animation-iteration-count: infinite; will-change: opacity; opacity: 0.5; } .word-animate:nth-child(7n + 1) { animation-delay: 0s; } .word-animate:nth-child(7n + 2) { animation-delay: 3s; } .word-animate:nth-child(7n + 3) { animation-delay: 6s; } .word-animate:nth-child(7n + 4) { animation-delay: 9s; } .word-animate:nth-child(7n + 5) { animation-delay: 12s; } .word-animate:nth-child(7n + 6) { animation-delay: 15s; } .word-animate:nth-child(7n + 7) { animation-delay: 18s; } 创建 layouts/_default/terms.html 输入以下代码 {{- define \u0026#34;main\u0026#34; }} {{- if .Title }} \u0026lt;header class=\u0026#34;page-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{- if .Description }} \u0026lt;div class=\u0026#34;post-description\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;/header\u0026gt; {{- end }} \u0026lt;ul class=\u0026#34;terms-tags\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;sourrounding_div\u0026#34; style=\u0026#34;width:100%;height:100%;min-height: 500px;\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;tag-canvas\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/js/wordcloud2.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- range $key, $value := .Data.Terms.Alphabetical }} {{ if eq \u0026#34;\u0026#34; ($.Scratch.Get \u0026#34;tagsMap\u0026#34;) }} {{ $.Scratch.Set \u0026#34;tagsMap\u0026#34; (slice (dict .Name .Count)) }} {{ else }} {{ $.Scratch.Add \u0026#34;tagsMap\u0026#34; (slice (dict .Name .Count)) }} {{ end }} {{- end }} {{ $result := ($.Scratch.Get \u0026#34;tagsMap\u0026#34;)}} \u0026lt;span id=\u0026#34;tag-temp\u0026#34; style=\u0026#34;display:none\u0026#34;\u0026gt;{{$result | jsonify }}\u0026lt;/span\u0026gt; \u0026lt;script\u0026gt; //因为前期每个标签值比较小，帮X一个系数 var XISHU = 20; //为了动态宽度 var div = document.querySelector(\u0026#34;#sourrounding_div\u0026#34;); var canvas = document.querySelector(\u0026#34;#tag-canvas\u0026#34;); canvas.style.width = div.offsetWidth + \u0026#39;px\u0026#39;; canvas.style.height = div.offsetHeight + \u0026#39;px\u0026#39;; var wordFreqData = document.querySelector(\u0026#34;#tag-temp\u0026#34;).innerHTML; var jsonObj = JSON.parse(wordFreqData); var arr = [] jsonObj.forEach(element =\u0026gt; { var key = Object.keys(element); var itemArr = [key[0], element[key] * XISHU]; arr.push(itemArr); }); //获取当前是暗色还是浅色 var isDark = document.body.className.includes(\u0026#34;dark\u0026#34;); WordCloud(canvas, { \u0026#34;list\u0026#34;: arr,//或者[[\u0026#39;各位观众\u0026#39;,45],[\u0026#39;词云\u0026#39;, 21],[\u0026#39;来啦!!!\u0026#39;,13]],只要格式满足这样都可以 \u0026#34;shape\u0026#34;: \u0026#34;cardioid\u0026#34;, //形状 circle (default), cardioid (心型), diamond, square, triangle-forward, triangle, pentagon, and star. \u0026#34;gridSize\u0026#34;: 20, // 密集程度 数字越小越密集 \u0026#34;weightFactor\u0026#34;: 1, // 字体大小=原始大小*weightFactor \u0026#34;fontWeight\u0026#34;: \u0026#39;normal\u0026#39;, //字体粗细 \u0026#34;fontFamily\u0026#34;: \u0026#39;Times, serif\u0026#39;, // 字体 \u0026#34;color\u0026#34;: isDark ? \u0026#39;random-light\u0026#39; : \u0026#39;random-dark\u0026#39;, // 字体颜色 \u0026#39;random-dark\u0026#39; 或者 \u0026#39;random-light\u0026#39; \u0026#34;backgroundColor\u0026#34;: \u0026#39;none\u0026#39;, // 背景颜色 \u0026#34;classes\u0026#34;: \u0026#34;tag-cloud-item word-color\u0026#34;, //用于点击事件 }); canvas.addEventListener(\u0026#39;wordcloudstop\u0026#39;, function (e) { //动画 setTimeout(() =\u0026gt; { var els = document.querySelectorAll(\u0026#34;.word-color\u0026#34;); Array.from(els).forEach((el) =\u0026gt; { console.log(\u0026#39;动画\u0026#39;, el) el.classList.add(\u0026#34;word-animate\u0026#34;) }) }, 2000); //点击 document.querySelectorAll(\u0026#39;.tag-cloud-item\u0026#39;).forEach(function (element) { const text = element.innerHTML; element.innerHTML = `\u0026lt;a href=\u0026#34;/tags/${text}\u0026#34; style=\u0026#34;color: inherit;\u0026#34;\u0026gt;${text}\u0026lt;/a\u0026gt;`; }); }); \u0026lt;/script\u0026gt; \u0026lt;/ul\u0026gt; {{- end }}{{/* end main */ -}} 参数可以自行修改，可以关注 shape 和 gridSize 等属性\nurl管理 在 hugo.yaml 中添加 permalinks.posts: \u0026quot;/:year/:month/:day/:slug/\u0026quot; 在 archetypes/default.md 中添加 slug: 在每一篇博文中，自己管理slug\n为文章添加过期提示 修改 single.html 文件中，在post-meta后面新增一个div块来展示该信息，代码如下： {{- if not (.Param \u0026#34;hideMeta\u0026#34;) }} \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;!-- 添加提示框逻辑 --\u0026gt; {{- $lastmod := .Lastmod }} {{- $now := now }} {{- $duration := $now.Sub $lastmod }} {{- $daysAgo := $duration.Hours }} {{- if ge $daysAgo (math.Mul 180 24) }} {{- if eq site.Params.defaultTheme `dark` -}} {{- $isDark := \u0026#34;.dark\u0026#34; }} {{- end -}} \u0026lt;div class=\u0026#34;post-age-hint\u0026#34;\u0026gt; 这篇文章最后更新已经超过180天了，内容可能已经过时。 \u0026lt;/div\u0026gt; 为该div块定制样式，在 assets/css/extended 目录下新增 custom.css 文件，输入以下代码，颜色可以随自己喜欢调整 :root { --post-age-hint-bg-color: #d4d4d4ac; --post-age-hint-color: #26b3fe; } .dark { --post-age-hint-bg-color: #6d6c6cac; --post-age-hint-color: #ff7723; } .post-age-hint { background-color: var(--post-age-hint-bg-color); /* 深灰色背景 */ color: var(--post-age-hint-color); /* 浅灰色文字 */ padding: 10px; border-left: 3px solid #ff6666; /* 红色边框，醒目但不刺眼 */ margin: 20px 0; border-radius: 5px; /* 圆角边框 */ } /* 添加一个过渡效果，鼠标悬停时改变边框颜色 */ .post-age-hint:hover { border-color: #ff9999; } 这段代码中，定义了两个变量用于适配不同主题，默认的白色主题，会使用root中的两个颜色，当切换到dark时，会使用.dark中定义的颜色\n","permalink":"https://www.zanks.link/2024/01/01/hugo-2/","summary":"装修一下旧时代的船，才能开门迎接更多的客人。","title":"【Hugo】进阶篇：PaperMod主题美化"},{"content":" 旧时代的船，想要载新世界的梦\n前言 2024年底，突然对游戏没了兴趣，在家里装了一台Homelab的机器后，开始广泛的对各种技术重新开始产生兴趣。在网上搜资料看到众多大佬自己的网站，找到了很多宝藏，心血来潮的有了自己建一个博客的想法。于是，拿出了被丢掉很多年的建站技能，和废弃很多年的域名，搭建了一个个人博客站，也就有了经典的博客第一篇文章就是搭建博客，meta-blog！\nPS: 按以下教程无需域名也能搭建\n阅读前请审视整体方案，需要会使用Github和命令行\n建站工具： hugo 建站工具皮肤： PaperMod 源代码（原文档）托管平台： Github 站点部署： Github Pages CI/CD(持续集成/持续部署)： Github Actions 整体思路为，在Github中创建两个代码仓，一个用于管理源代码（博主的工作台，建议设置为Private），另一个用于部署静态站点（需要特殊命名，利用Github Pages托管），再利用Github Actions监听源代码仓变动后，自动更新Github Pages页面。\nHugo安装及配置 以下命令均由GitBash终端执行，如使用CMD或PowerShell可以自行替换对应命令\nHugo安装 Hugo的安装比较简单，go的编译产物基本都是一个二进制的可执行文件。从Github的Release页面下载对应操作系统的可执行文件即可。\n我常用的工作、开发机操作系统均为Windows，则以Windows为例，下载 hugo的windows版本文件，将.exe文件解压到任意位置，如D:\\sdk\\hugo。打开环境变量配置，在PATH变量中新增D:\\sdk\\hugo 目录，使得命令行可以直接使用hugo.exe而不需要CD到指定目录（不会新增环境变量的，请自行百度）。\n下载及配置完之后，打开命令行，输入hugo version 或 hugo.exe version进行验证，如输出版本号则代表安装成功。例如我的输出为：\n$ hugo version hugo v0.139.3-2f6864387cd31b975914e8373d4bf38bddbd47bc+extended+withdeploy windows/amd64 BuildDate=2024-11-29T15:36:56Z VendorInfo=gohugoio 创建站点 使用hugo命令 hugo new site $YOUR_SITE_NAME 来创建站点。该站点后续会被作为原文档仓库托管到Github进行管理\n$ hugo new site zanks-blog Congratulations! Your new Hugo site was created in D:\\03_code\\personal\\zanks-blog. Just a few more steps... 1. Change the current directory to D:\\03_code\\personal\\zanks-blog. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 命令输入完成后，会在当前目录下创建zanks-blog文件夹，这个文件夹会作为原文档仓库。使用tree命令（没有的也可以直接用ll）看一下hugo生成的目录，内容不多。\n$ tree . . |-- archetypes | `-- default.md |-- assets |-- content |-- data |-- hugo.toml |-- i18n |-- layouts |-- static `-- themes 8 directories, 2 files 配置皮肤 在正式启动前，可以给站点安装一个自己喜欢的皮肤（如果不安装，直接进行下一步本地调试，会出现Page Not Found的错误，我已经试过了，不必再试）\n我使用的皮肤是PaperMode\n首先，使用git init将这个站点目录变为Git仓库，然后使用submodule命令获取皮肤，这边会从Github上下载东西，如果遇到网络问题，需要使用魔法手段解决。\n这里稍微解释一下，submodule 是一个不太常见的Git命令，通常被用于管理Git仓库中的子模块（submodule）。子模块是指一个Git仓库作为另一个Git仓库的子目录。使用子模块，可以将一个项目嵌入到另一个项目中，同时保持两者的独立性。（AI告诉我的，其实我也不懂）\n$ git init Initialized empty Git repository in D:/03_code/personal/zanks-blog/.git/ $ git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod Cloning into \u0026#39;D:/03_code/personal/zanks-blog/themes/PaperMod\u0026#39;... remote: Enumerating objects: 139, done. remote: Counting objects: 100% (139/139), done. remote: Compressing objects: 100% (98/98), done. remote: Total 139 (delta 36), reused 121 (delta 36), pack-reused 0 (from 0) Receiving objects: 100% (139/139), 249.18 KiB | 5.08 MiB/s, done. Resolving deltas: 100% (36/36), done. warning: in the working copy of \u0026#39;.gitmodules\u0026#39;, LF will be replaced by CRLF the next time Git touches it 根据PaperMod的官方建议，使用yaml替换toml作为配置文件。安装主题后，备份hugo.toml文件，新增hugo.yml并添加以下内容，其中title可以随意替换为自己喜欢的。\nbaseUrl: https://example.org/ languageCode: zh-cn title: 乱话三千 theme: PaperMod 以上配置只能保证站点可以启动，下文中将给出更多高阶配置，需要理解并筛选和更改为适用于自己站点的配置项（当然你直接照抄也是可以的）\nbaseUrl: https://example.org/ languageCode: zh-cn # en-us title: 乱话三千 theme: PaperMod enableRobotsTXT: true # 允许爬虫协议 enableEmoji: true # 允许使用Emoji表情 buildDrafts: false buildFuture: false buildExpired: false params: profileMode: enabled: true subtitle: \u0026#34;记载着某个人的胡言乱语\u0026#34; imageUrl: \u0026#34;/homepage.jpg\u0026#34; # optional imageWidth: 150 # custom size imageHeight: 150 # custom size buttons: - name: 点击开始 url: \u0026#34;/posts\u0026#34; menu: main: - identifier: post name: 文章 url: /posts/ weight: 10 - identifier: tags name: 标签 url: /tags/ weight: 20 - identifier: about name: 关于 url: /about/ weight: 30 这份配置使用了ProfileMode，在首页配置了一个图标和一个按钮，按钮将链接到 /posts 路径。并且在右上角的菜单中添加了三个按钮，分别连接到对应的路径，其中weight表示排序权重，数字越小按钮越靠近左侧。\n创建文章 使用 hugo new $YOUR_ARTICAL命令来创建文章\n$ hugo new posts/test.md Content \u0026#34;D:\\\\03_code\\\\personal\\\\zanks-blog\\\\content\\\\posts\\\\test.md\u0026#34; created 该命令在content/posts目录下创建了test.md文件，可以再使用 tree content命令或者 ll content 查看\n$ tree content/ content/ |-- posts | `-- test.md `-- posts.md 1 directory, 2 files 然后再使用cat命令查看自动生成的文件中有什么内容\n$ cat content/posts/test.md +++ date = \u0026#39;2024-12-09T09:25:05+08:00\u0026#39; draft = true title = \u0026#39;Test\u0026#39; +++ 其中date、titile很好理解，分别为日期和文章的标题。draft 这个查阅了一下官网的解释，大致的意思为表示当前的文章为草案，在构建时除非人为添加参数指定，否则不会打包到最后的静态文件中。以下是官网的原文解释：\ndraft: (`bool`) If `true`, the page will not be rendered unless you pass the `--buildDrafts` flag to the `hugo` command. Access this value from a template using the [`Draft`](https://gohugo.io/methods/page/draft/) method on a `Page` object. 然后，给文件中，添加一些内容。这里不需要修改draft，后续在编译中可以通过参数指定查看到草稿内容。但生产环境需要发布时，将draft的值改为false\n$ cat content/test.md +++ date = \u0026#39;2024-12-09T09:25:05+08:00\u0026#39; draft = true title = \u0026#39;Test\u0026#39; +++ 这是一篇测试文章 本地调试 本地调试是hugo提供的非常方便的工具，可以让我们在正式发布前看到站点的样子。只需要执行 hugo server 或 hugo serve 即可在本地启动服务端（在调试时可以添加-D参数看到草稿中的文章）。以下是我进行尝试的输出。\n$ hugo serve -D Watching for changes in D:\\03_code\\personal\\zanks-blog\\{archetypes,assets,content,data,i18n,layouts,static,themes} Watching for config changes in D:\\03_code\\personal\\zanks-blog\\hugo.yml Start building sites … hugo v0.139.3-2f6864387cd31b975914e8373d4bf38bddbd47bc+extended+withdeploy windows/amd64 BuildDate=2024-11-29T15:36:56Z VendorInfo=gohugoio | EN -------------------+----- Pages | 11 Paginator pages | 0 Non-page files | 0 Static files | 1 Processed images | 0 Aliases | 0 Cleaned | 0 Built in 64 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 启动后，终端输出了服务器地址，使用浏览器进入就可以预览站点部署后的样子了。不出意外的话，可以看到创建的测文章。\n配置文章模板 在archetypes目录下备份并修改default.md文件来修改新增文章的模板，以下是我根据官方模板进行修改的模板\n--- title: \u0026#34;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: 2020-09-15T11:30:03+00:00 tags: [\u0026#34;\u0026#34;] author: \u0026#34;Zanks\u0026#34; draft: true # 默认为草稿模式 weight: #可以用于置顶 showToc: true # 显示目录 TocOpen: false # 打开目录 comments: false # 评论 description: \u0026#34;\u0026#34; searchHidden: false # 优化SEO ShowReadingTime: true ShowWordCount: true --- 添加About页面 前面已经配置了About的链接，但是在访问时会出现404，下文中将会配置这个页面。 依然是使用hugo new 命令来创建md文件\n$ hugo new about.md Content \u0026#34;D:\\\\03_code\\\\personal\\\\zanks-blog\\\\content\\\\about.md\u0026#34; created 在其中添加一些介绍自己的内容，然后进入页面，点击关于就可以看到新增加到内容了（在发布时，记得将draft更改为false）\n我尝试直接在content目录下创建 about.md 文件，在调试环境中可以看到这个页面，但是实际发布后却没有在public目录找到对应文件，暂时没有找到解决方案。删除并配置了文章模板后，通过命令创建about.md后可以正常工作。\n源代码仓管理 本地仓初始化 执行 git init 命令来初始化目录为git仓 $ git init Initialized empty Git repository in D:/03_code/personal/zanks-blog/.git/ 添加一个.gitignore文件，将public文件夹取消跟踪，该仓将作为源代码仓进行管理，所以构建产物不需要加入跟踪。并将该文件commit（建议通过VSCode等带有图形化管理的操作） $ cat .gitignore /public 为每个空的目录添加.gitkeep文件，来保证源代码仓的完整目录结构（asset、data、i18n、layouts），提交所有改动文件。 完成以上动作之后，本地仓构建完成。后面将在Github上创建代码仓，与该本地仓进行关联。\nGithub代码仓创建 在Github上创建一个空代码仓，使用命令进行关联。在Github页面上会有提示如何关联已有仓库，根据给出的命令直接复制到终端执行即可。\n$ git remote add origin git@github.com:ZaNksC/zanks-blog.git git branch -M main git push -u origin main Enumerating objects: 165, done. Counting objects: 100% (165/165), done. Delta compression using up to 12 threads Compressing objects: 100% (148/148), done. Writing objects: 100% (165/165), 274.80 KiB | 1.01 MiB/s, done. Total 165 (delta 36), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (36/36), done. To github.com:ZaNksC/zanks-blog.git * [new branch] main -\u0026gt; main branch \u0026#39;main\u0026#39; set up to track \u0026#39;origin/main\u0026#39; 登录Github就可以看到该代码仓中已经有内容了。\n完成这一步后，就可以在任何装有Git和Hugo的机器上对博客进行开发了。\n自动化部署 Github Pages托管 使用Github Pages进行静态站点托管，需要在Github中创建一个名为 username.github.io的特殊项目。 创建之后，就可以用 https://username.github.io 作为域名直接访问了，当然现在这里是一个空项目，访问之后会出现404。\nGithub Action自动化部署 Github的Action是一套标准的CI/CD系统，通过内置在源代码仓中.github/workflow目录下的yaml文件来定义流水线的动作。以下是我从Github Workflow的hugo流水线模板修改来的CICD一体化流水线。\n$ cat .github/workflows/hugo.yml # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.139.3 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: hugo --baseURL=https://zanksc.github.io - name: Deploy Pages uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: ZaNksC/ZaNksC.github.io PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 需要自行修改 Build With Hugo 步骤中的构建命令，baseURL替换为自己的博客地址，Deploy Pages步骤中的EXTERNAL_REPOSITORY变量，需要替换为自己的GitPage地址。\n需要注意的是，在最后一个步骤Deploy Pages中，有${{ secrets.PERSONAL_TOKEN }}变量，这个变量位于源代码仓-settings-Secrete And variables-Action中。需要在这个目录中创建一个名为PERSONAL_TOKEN的变量。 变量的值则需要在Github（点击头像） - settings-Deploy Settings-Personal access tokens中创建，创建一个经典（classic）的Token，赋予 repo 的所有权限保证可以读写仓库。复制该Token的值（只会出现一次），填入上文提到的 PERSONAL_TOKEN的变量中。 在全部配置完成之后，可以通过 hugo new posts/test.md 输入一些内容并将draft值改为true，输入 git add . \u0026amp;\u0026amp; git commit -m \u0026quot;add test.md\u0026quot; 进行提交，然后等待一段时间后，访问 https://name.github.io 查看博客中是否出现该文章来进行全流程验证。\n参考资料 Hugo官方指导手册 PaperMode安装指南 pseudoyu的一站式指导 ","permalink":"https://www.zanks.link/2024/01/01/hugo-1/","summary":"旧时代的船，想要载新世界的梦","title":"【Hugo】基础篇：个人博客搭建"},{"content":"小高姐三酱牛肉 来自： B站传送门\n材料 牛腱子 1000g 豆瓣酱 120g 酱油 180g 生姜 适量 腐乳 两块 八角、香叶等香料适量（香料包+草果） 制作步骤 牛腱子泡水（冬天可长一点，夏天3小时） 牛腱子用酱油腌制，放入冰箱12小时 冷水下锅，边煮边去血沫 沸腾后加入准备好的豆瓣酱、生姜、腐乳、香料 转小火煮2个小时，建议每半个小时看一次 ","permalink":"https://www.zanks.link/recipe/","summary":"\u003ch1 id=\"小高姐三酱牛肉\"\u003e小高姐三酱牛肉\u003c/h1\u003e\n\u003cp\u003e来自： \u003ca href=\"https://www.bilibili.com/video/BV1VW41147Fh/?spm_id_from=333.337.search-card.all.click\"\u003eB站传送门\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"材料\"\u003e材料\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e牛腱子 1000g\u003c/li\u003e\n\u003cli\u003e豆瓣酱 120g\u003c/li\u003e\n\u003cli\u003e酱油 180g\u003c/li\u003e\n\u003cli\u003e生姜 适量\u003c/li\u003e\n\u003cli\u003e腐乳 两块\u003c/li\u003e\n\u003cli\u003e八角、香叶等香料适量（香料包+草果）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"制作步骤\"\u003e制作步骤\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e牛腱子泡水（冬天可长一点，夏天3小时）\u003c/li\u003e\n\u003cli\u003e牛腱子用酱油腌制，放入冰箱12小时\u003c/li\u003e\n\u003cli\u003e冷水下锅，边煮边去血沫\u003c/li\u003e\n\u003cli\u003e沸腾后加入准备好的豆瓣酱、生姜、腐乳、香料\u003c/li\u003e\n\u003cli\u003e转小火煮2个小时，建议每半个小时看一次\u003c/li\u003e\n\u003c/ol\u003e","title":"🍳 Zanks的私人食谱 🍳"},{"content":" 性别：男 年龄：保密 有一个博学多识且貌美如花的女朋友 养了一只叫“基金”的小猫 从事大数据、Java后端相关工作。曾经在最该奋斗的年纪进入了最能奋斗的地方，并且全身而退。目前已经回老家摆烂，开始重新思考工作和生活的意义。\n在学校时就折腾过博客，因为懒癌（主要）和大厂连轴转的工作磨掉了对于技术的热爱（借口）后放弃了。现在从大厂离职摆烂了一年多之后，终于重新捡起了对于技术的热爱。\n喜欢折腾HomeLab和各种奇奇怪怪的东西，爱好颇多，但擅长的没有。\n本博客在2025年1月1日重启，希望可以坚持得久一些。\n","permalink":"https://www.zanks.link/about/","summary":"\u003cul\u003e\n\u003cli\u003e性别：男\u003c/li\u003e\n\u003cli\u003e年龄：保密\u003c/li\u003e\n\u003cli\u003e有一个博学多识且貌美如花的女朋友\u003c/li\u003e\n\u003cli\u003e养了一只叫“基金”的小猫\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e从事大数据、Java后端相关工作。曾经在最该奋斗的年纪进入了最能奋斗的地方，并且全身而退。目前已经回老家摆烂，开始重新思考工作和生活的意义。\u003c/p\u003e\n\u003cp\u003e在学校时就折腾过博客，因为懒癌（主要）和大厂连轴转的工作磨掉了对于技术的热爱（借口）后放弃了。现在从大厂离职摆烂了一年多之后，终于重新捡起了对于技术的热爱。\u003c/p\u003e\n\u003cp\u003e喜欢折腾HomeLab和各种奇奇怪怪的东西，爱好颇多，但擅长的没有。\u003c/p\u003e\n\u003cp\u003e本博客在2025年1月1日重启，希望可以坚持得久一些。\u003c/p\u003e","title":"😾 关于基金的铲屎官 😾 "},{"content":"排名不分先后，按时间顺序添加。如需新增请留言，或通过其他方式联系我。\n","permalink":"https://www.zanks.link/friends/","summary":"\u003cp\u003e排名不分先后，按时间顺序添加。如需新增请留言，或通过其他方式联系我。\u003c/p\u003e","title":"🧑‍🤝‍🧑 Zanks的朋友们 🧑‍🤝‍🧑"}]